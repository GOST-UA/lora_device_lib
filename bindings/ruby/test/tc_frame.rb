require 'minitest/autorun'
require 'ldl'

class TestFrame < Minitest::Test
    
    include LDL

    def test_unconfirmedUp
        msg = UnconfirmedUp.new        
        decoded = Frame.decode(msg.encode)        
    end
    
    def test_joinReq    
        msg = JoinReq.new
        decoded = Frame.decode(msg.encode)        
    end
    
    def test_joinAccept    
        msg = JoinAccept.new
        decoded = Frame.decode(msg.encode)        
    end
    
    def test_croft_decode
        
        key = Key.new([0x2B,0x7E,0x15,0x16,0x28,0xAE,0xD2,0xA6,0xAB,0xF7,0x15,0x88,0x09,0xCF,0x4F,0x3C].pack("c*"))
        
        expected = [0x80, 0x8F, 0x77, 0xBB, 0x07, 0x00, 0x02, 0x00, 0x06, 0xBD, 0x33, 0x42, 0xA1, 0x9F, 0xCC, 0x3C, 0x8D, 0x6B, 0xCB, 0x5F, 0xDB, 0x05, 0x48, 0xDB, 0x4D, 0xC8, 0x50, 0x14, 0xAE, 0xEB, 0xFE, 0x0B, 0x54, 0xB1, 0xC9, 0x98, 0xDE, 0xF5, 0x3E, 0x97, 0x9B, 0x70, 0x1D, 0xAB, 0xB0, 0x45, 0x30, 0x0E, 0xF8, 0x69, 0x9C, 0x38, 0xFC, 0x1A, 0x34, 0xD5].pack("C*")        
        
        decoded = Frame.decode(expected, 
            nwkSKey: key, 
            appSKey: key, 
        )
        
        assert_equal :ok, decoded.result
        
        output = decoded.encode
        
        assert_equal expected, output
        
    end
    
    def test_croft_encode
        
        key = Key.new([0x2B,0x7E,0x15,0x16,0x28,0xAE,0xD2,0xA6,0xAB,0xF7,0x15,0x88,0x09,0xCF,0x4F,0x3C].pack("c*"))
        
        expected = [0x80, 0x8F, 0x77, 0xBB, 0x07, 0x00, 0x02, 0x00, 0x06, 0xBD, 0x33, 0x42, 0xA1, 0x9F, 0xCC, 0x3C, 0x8D, 0x6B, 0xCB, 0x5F, 0xDB, 0x05, 0x48, 0xDB, 0x4D, 0xC8, 0x50, 0x14, 0xAE, 0xEB, 0xFE, 0x0B, 0x54, 0xB1, 0xC9, 0x98, 0xDE, 0xF5, 0x3E, 0x97, 0x9B, 0x70, 0x1D, 0xAB, 0xB0, 0x45, 0x30, 0x0E, 0xF8, 0x69, 0x9C, 0x38, 0xFC, 0x1A, 0x34, 0xD5].pack("C*")        
        
        encoded = ConfirmedUp.new(
            nwkSKey: key, 
            appSKey: key, 
            counter: 2,
            data: "{\"name\":\"Turiphro\",\"count\":13,\"water\":true}",
            port: 6,
            devAddr: 129726351
        ).encode
            
        assert_equal expected, encoded
        
        decoded = Frame.decode(expected, 
            nwkSKey: key, 
            appSKey: key, 
        )
        
        assert_equal :ok, decoded.result
        
    end

end
